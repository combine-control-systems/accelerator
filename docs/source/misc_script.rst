Miscellaneous
=============

Depend on extra files
---------------------


Equivalent Hashes
-----------------


Accessing a Job's parameters
----------------------------


Accessing a Job's post data
---------------------------


More input option types
-----------------------

jobWithFile

RequiredOptions

OptionEnum

none_ok




Status and Progress Reporting
-----------------------------

Ideally, jobs should complete fast.  When they do not, it is easy to
check the progress using the built in status functionality.  Status is
invoked by pressing ``C-t`` in the server or build terminals.

.. tip ::  Press C-t (That is CTRL + t) at any time to see status.

It is also possible to issue the ``ax status`` command.

.. tip :: The shell command ``ax status`` provides status information
   *as well as the last error that has occured*.

.. tip :: The status is also available in exax Board.

Status messages are generated by most built in methods and functions,
such as for example ``csvimport`` and ``json_load()``, and it is
straightforward to design new ones.



Creating Status Messages
........................

It is possible to create status messages using the status context
manager.  Here's an example

.. code-block ::
   :caption: Example of status context manager with static content.

   from accelerator import status
   ...
   def synthesis():
       with status('reading huge file') as s:
           jobs.source.load('bigfile')

And here's another example that updates the status message to reflect
the progress of the program

.. code-block ::
   :caption: Example of status context manager with dynamic content.

   from accelerator import status
   ...
   def analysis(sliceno):
       msg = "reached line %d already!"
       with status(msg % (0,) as update:
           for ix, data in enumerate(datasets.source.iterate(sliceno, 'data')):
           if ix % 1000000 == 0:
               update(msg % (ix,))

The last created status message will be printed to ``stdout`` when
``C-t`` is pressed.
